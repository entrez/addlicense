#!/usr/bin/env sh

format_dirlist ( ) {
[ $# -lt 1 ] && echo "$0: missing argument" && exit
for D in $1; do
    expr "$D" : '^$HOME' &>/dev/null && D="~`expr "$D" : '^$HOME\(.*\)'`"
    printf '    %s\n' "$D"
done
}

SCRIPTNAME="`echo "$0" | sed 's/^.*\///'`"
DRYRUN='no'; USETHEFORCE='no'; BLOCKEMAIL='no'
LICENSE=
[ -n "$LICENSE_YEAR" ] && YEAR="$LICENSE_YEAR" \
    || YEAR="`date +%Y || echo '20xx'`"
[ -n "$LICENSE_FULLNAME" ] && NAME="$LICENSE_FULLNAME" \
    || NAME="`git config --get user.name 2>/dev/null \
    || id -F 2>/dev/null || id -un 2>/dev/null \
    || whoami || echo 'the project author(s)'`"
[ -n "$LICENSE_EMAIL" ] && EMAIL="$LICENSE_EMAIL" \
    || EMAIL="`git config --get user.email 2>/dev/null \
    || echo ''`"

POSSIBLE_LICENSEDIRS=\
'$HOME/.local/share/addlicense/licenses
$HOME/.addlicense/licenses
$HOME/.licenses'

[ -n "$XDG_DATA_DIRS" ] && \
    XDG_LICENSEDIRS="
`echo "$XDG_DATA_DIRS" | tr ':' '\n' | xargs -I % echo %/addlicense/licenses` 
/usr/local/share/addlicense/licenses
/usr/share/addlicense/licenses" \
    || XDG_LICENSEDIRS='
/usr/local/share/addlicense/licenses
/usr/share/addlicense/licenses'

LICENSE_HELP=\
"LICENSE FILES:
License information comes from plain text files; each one should contain
the text of a particular license (optionally including parameters [name],
[fullname], and [year], which will be filled automatically) and should
have a filename corresponding to that license's name (e.g. \`mit.txt') or
some other recognizable nickname or identifier. Licenses in this format
may be available for download from <https://choosealicense.com>.

\$LICENSE_DIR may be set manually to a location containing these files;
otherwise, the following locations will be checked in order until one of
them is found to be an existing directory:
    \$XDG_DATA_HOME/addlicense/licenses
`format_dirlist "$POSSIBLE_LICENSEDIRS"`
    \$XDG_DATA_DIRS/addlicense/licenses
    /usr/local/share/addlicense/licenses
    /usr/share/addlicense/licenses "

[ -n "$XDG_DATA_HOME" ] && POSSIBLE_LICENSEDIRS="\$XDG_DATA_HOME/addlicense/licenses
$POSSIBLE_LICENSEDIRS"

# if $LICENSE_DIR is not set already by the user, check for
# potential locations in the following order of preference:
# $XDG_DATA_HOME/addlicense/licenses
# $HOME/.local/share/addlicense/licenses
# $HOME/.addlicense/licenses
# $HOME/.licenses
# $XDG_DATA_DIRS/addlicense/licenses
# (if not included in XDG_DATA_DIRS:
# /usr/local/share/addlicense/licenses
# /usr/share/addlicense/licenses)
if [ -z "$LICENSE_DIR" ]; then 
    for LDIR in ${POSSIBLE_LICENSEDIRS}${XDG_LICENSEDIRS}; do
        LDIR="`eval printf %s $LDIR`"
        [ -d "$LDIR" ] && LICENSE_DIR="$LDIR"
        break
    done
fi

if [ -z "$LICENSE_DIR" ]; then
    LICENSE_OPTIONS='[none]'
    LICENSECOUNT=''
else
    LICENSE_OPTIONS="`ls $LICENSE_DIR | sed 's/^\(.*\)\..*$/\1/g' | xargs -I _ printf "'%s' " _`"
    [ "`printf %s "$LICENSE_OPTIONS" | awk '{ print length }'`" -eq 0 ] \
        && LICENSE_OPTIONS='[none]' && LICENSECOUNT=' (0)' \
        || LICENSECOUNT=" (`printf %s "$LICENSE_OPTIONS" | awk '{ print NF }'` valid files found)"
    LICENSE_OPTIONS="`printf '%s' "$LICENSE_OPTIONS" | fmt -w 73`"
fi

HELP_TEXT=\
"USAGE: $SCRIPTNAME [ --name <name> ] [ --year <year> ] [ --email <email> ]
            [ -w | --format-width <width> ] [ -f | --force ] [ --no-email ]
            [ --dry-run ] <license name>
       $SCRIPTNAME [ -l | --list ]

OPTIONS:
    -h,--help                   Print this info

    -l,--list                   Print license dir & available licenses

    --name <name>               Use specified full name. If not included,
                                \$LICENSE_FULLNAME will be used if it is
                                defined; otherwise various programs will
                                be used in an attempt to guess the user's
                                name: git-config(1), id(1), whoami(1),
                                etc

    --year <year>               Use specified copyright date. If not
                                included, \$LICENSE_YEAR will be used if
                                defined; otherwise output from date(1)
                                will be used as a fallback

    --email <email>             Use specified email. If not included,
                                \$LICENSE_EMAIL, then git-config(1) will
                                be checked for a user email - if neither
                                is defined, email is omitted

    --no-email                  Forces email to be dropped from name,
                                even if one is defined in git-config(1)
                                or in \$LICENSE_EMAIL

    -w,--format-width <width>   Pipes the license text through fmt(1)
                                prior to output, using the provided
                                number of cols/characters as the text
                                width.

    -f,--force                  Continue even if a \`LICENSE' file
                                already exists in the current working
                                directory

    --dry-run                   Print the license, name, etc to be used,
                                as well as the license text itself, to
                                STDOUT, but do not actually create or
                                overwrite a \`LICENSE' file in the
                                current working directory

LICENSE DIRECTORY:
`if [ -z "$LICENSE_DIR" ]; then
    printf %s '[not found]'
elif expr &>/dev/null "$LICENSE_DIR" : "^$HOME"; then
    printf %s '~'
    expr "$LICENSE_DIR" : "^$HOME\(.*\)"
else
    printf '%s' "$LICENSE_DIR"
fi`

AVAILABLE LICENSES${LICENSECOUNT}:
$LICENSE_OPTIONS"

FORMAT_WIDTH=

while [ $# -gt 0 ]; do
    case "$1" in
        -l|--list)
            if [ -z "$LICENSE_DIR" ]; then
                LICENSEDIR_DISP='[not found]'
                cat >&2 <<EOF
Run \`$SCRIPTNAME --help\` for details regarding how to make license files
accessible for this script to find and use, plus advice on sites where
appropriately formatted copies of various licenses may be available for
download on the Web.

EOF
            elif expr &>/dev/null "$LICENSE_DIR" : "^$HOME"; then
                LICENSEDIR_DISP="~`expr "$LICENSE_DIR" : "^$HOME\(.*\)"`"
            else
                LICENSEDIR_DISP="$LICENSE_DIR"
            fi

            printf >&2 'LICENSE DIRECTORY:\n%s\n\nAVAILABLE LICENSES%s:\n%s\n' \
                "$LICENSEDIR_DISP" "$LICENSECOUNT" "$LICENSE_OPTIONS"
            exit 1
            ;;
        -h|--help)
            printf >&2 '%s: add a license file to the current directory\n\n%s\n' \
                "$SCRIPTNAME" "$HELP_TEXT"
            [ -z "$LICENSE_DIR" ] && printf >&2 '\n%s\n' "$LICENSE_HELP"
            exit
            ;;
        --name)
            if [ -z "$2" ]; then
                printf >&2 '%s: option %s requires argument <%s>\n' \
                    "$SCRIPTNAME" "$1" 'name'
            else
                NAME="$2"; shift
            fi
            ;;
        --email)
            if [ -z "$2" ]; then
                printf >&2 '%s: option %s requires argument <%s>\n' \
                    "$SCRIPTNAME" "$1" 'email'
            else
                EMAIL="$2"; shift
            fi
            ;;
        --year)
            if [ -z "$2" ]; then
                printf >&2 '%s: option %s requires argument <%s>\n' \
                    "$SCRIPTNAME" "$1" 'year'
            else
                YEAR="$2"; shift
            fi
            ;;
        --no-email)
            BLOCKEMAIL='yes'
            ;;
        --dry-run)
            DRYRUN='yes'
            ;;
        -f|--force)
            USETHEFORCE='yes'
            ;;
        -w|--format-width)
            if [ -z "$2" ]; then
                printf >&2 '%s: option %s requires argument <%s>\n' \
                    "$SCRIPTNAME" "$1" 'width'
            else
                FORMAT_WIDTH="$2"; shift
            fi
            ;;
        -*)
            printf >&2 '%s: option not recognized: %s\n' \
                "$SCRIPTNAME" "$1"
            exit 1
            ;;
        *)
            if [ -z "$LICENSE_DIR" ]; then
                printf >&2 '%s: license directory is missing; see --help for more info\n' "$SCRIPTNAME"
                exit 1
            elif [ -n "$LICENSE" ]; then
                printf >&2 '%s: only specify one license name\n' "$SCRIPTNAME"
                exit 1
            elif ! ls "$LICENSE_DIR" | grep --color=none -E "^$1(\..*)?" &>/dev/null; then
                printf >&2 '%s: license `%s'\'' not available\n\nAVAILABLE LICENSES:\n%s\n' \
                    "$SCRIPTNAME" "$1" "$LICENSE_OPTIONS"
                exit 1
            else
                LICENSE="`ls "$LICENSE_DIR" | grep --color=none -E "^$1(\..*)?"`"
                if [ "`printf %s "$LICENSE" | wc -l`" -gt 1 ]; then
                    printf >&2 '%s: ambiguous license name\n' "$SCRIPTNAME"
                    printf >&2 '`%s'\'' could refer to:' "$1"
                    printf >&2 ' %s' `for L in $LICENSE; do echo "`printf %s "$L" | sed 's/\..*$//'`"; done`
                    exit 1
                fi
            fi
            ;;
    esac
    shift
done

[ -n "$EMAIL" ] && [ "$BLOCKEMAIL" = 'no' ] && EMAIL=" <${EMAIL}>" || EMAIL=''
if [ -z "$LICENSE_DIR" ]; then
    printf >&2 '%s: license directory is missing; see --help for more info\n' "$SCRIPTNAME"
    exit 1
elif [ -z "$LICENSE" ]; then
    printf >&2 '%s: you must specify a license name; see --help for more info\n' "$SCRIPTNAME"
    exit 1
fi

OUTPUT_LOC=./LICENSE
if [ ! -e $OUTPUT_LOC ] || [ "$USETHEFORCE" = 'yes' ]; then
    PROJECT_NAME="`pwd | sed -E 's/^.*\/([^/]*)\/?/\1/'`"
    printf >&2 'Â© %s by %s%s\n' "$YEAR" "$NAME" "$EMAIL"
    printf >&2 'license: %s\n' "`printf %s "$LICENSE" | sed 's/\..*$//'`"

    license_text="`sed <"$LICENSE_DIR/$LICENSE" -E "s/\[(full)?name\]/${NAME}${EMAIL}/g;s/\[year\]/$YEAR/g"`"
    [ -n "$FORMAT_WIDTH" ] && license_text="`printf '%s' "$license_text" | fmt -p -t4 -w "$FORMAT_WIDTH"`"
    if [ "$DRYRUN" = 'no' ]
    then
        printf '%s' "$license_text" > ./LICENSE \
          && printf >&2 'success: added license\n' \
          || printf >&2 'error: could not add license\n'
    else
        printf '%s' "$license_text"
    fi
else
    printf >&2 '%s: `%s'\'' already exists, use --force to overwrite\n' \
        "$SCRIPTNAME" 'LICENSE'
fi
